/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import org.junit.Test;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.Assert.*;

public class AppTest {

    @Test
    public void testGreenBlack() throws IOException {
        BufferedImage dummyImage = Bitmap.dummyBitMap();

        String outputFilePath = "C:\\Users\\STUDENT\\401\\bitmap-transformer\\app\\src\\test\\resources\\testGreenBlack.bmp";
        Bitmap.setImageData(dummyImage, outputFilePath);

        Bitmap.reverseBlackAndGreen();
        Bitmap.save();

        Path newBitMapInPath = Paths.get(outputFilePath);

        BufferedImage newImageData = ImageIO.read(newBitMapInPath.toFile());

        Color black = new Color(0, 0, 0);
//        Color white = new Color(255, 255, 255);
        Color green = new Color(46, 255, 0);

        assertEquals("This test should return a green color",green.getRGB(), newImageData.getRGB(0, 0));
        assertEquals("This test should return a black color",black.getRGB(), newImageData.getRGB(0, 3));

    }

    @Test
    public void testStretchVertically() throws IOException {
        BufferedImage dummyImage = Bitmap.dummyBitMap();

        String outputFilePath = "C:\\Users\\STUDENT\\401\\bitmap-transformer\\app\\src\\test\\resources\\testStretchVertically.bmp";
        Bitmap.setImageData(dummyImage, outputFilePath);

        Bitmap.stretchVertically();
        Bitmap.save();

        Path newBitMapInPath = Paths.get(outputFilePath);

        BufferedImage newImageData = ImageIO.read(newBitMapInPath.toFile());

        assertEquals("This test should return a height of 8",8, newImageData.getHeight());

    }

    @Test
    public void testStretchHorizontally() throws IOException {
        BufferedImage dummyImage = Bitmap.dummyBitMap();

        String outputFilePath = "C:\\Users\\STUDENT\\401\\bitmap-transformer\\app\\src\\test\\resources\\testStretchHorizontally.bmp";
        Bitmap.setImageData(dummyImage, outputFilePath);

        Bitmap.stretchHorizontally();
        Bitmap.save();

        Path newBitMapInPath = Paths.get(outputFilePath);

        BufferedImage newImageData = ImageIO.read(newBitMapInPath.toFile());

        assertEquals("This test should return a width of 8",8, newImageData.getWidth());

    }

//    @Test
//    public void testRandom() throws IOException {
//        BufferedImage dummyImage = Bitmap.dummyBitMap();
//
//        String outputFilePath = "C:\\Users\\STUDENT\\401\\bitmap-transformer\\app\\src\\test\\resources\\testRandom.bmp";
//        Bitmap.setImageData(dummyImage, outputFilePath);
//        Bitmap.random();
//        Bitmap.save();
//
//        Path newBitMapInPath = Paths.get(outputFilePath);
//
//        BufferedImage newImageData = ImageIO.read(newBitMapInPath.toFile());
//
//        Color black = new Color(0, 0, 0);
//        Color white = new Color(255, 255, 255);
//
//        int halfW = dummyImage.getRGB(0, 3)/2;
//        int halfB = dummyImage.getRGB(0,0)/2;
//        assertEquals("This test should return a getRGB() /2 color",halfB, (newImageData.getRGB(0, 0)/2));
//        assertEquals("This test should return a getRGB() /2 color",halfW, (newImageData.getRGB(0, 3)/2));
//
//    }
}
